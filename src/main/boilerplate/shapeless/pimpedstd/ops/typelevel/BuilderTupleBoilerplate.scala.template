/*
 * Copyright (c) 2014 Alexandre Archambault
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package shapeless.pimpedstd.ops.typelevel

import scala.collection.mutable
import shapeless._

trait BuilderTupleBoilerplate extends BuilderDefinitions {

  [$implicit def tuple1Builder[A]: Aux[Product, nat._1, A, Tuple1[[$A$]]] =
    new Builder[Product, nat._1, A] {
      import scala.::

      type Group = Tuple1[[$A$]]

      def apply() = new mutable.ListBuffer[A] .mapResult(fromList)
      
      def fromList(l: List[A]) =
        l match {
          case [$a1$ :: ] :: _ =>
            Some(Tuple1([$a1$]))
          case _ =>
            None
        }
    }$
  ]

}